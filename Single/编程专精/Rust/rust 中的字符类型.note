\title: rust 中的字符类型
\date: 2020-3-5
\tags: rust, type

- `&str`
- `String`
- `Cow<str>`
- `Box<str>`

## `&str`

&str字符串片段, 一种比较特殊的数组片段(slice), 更多可以查看: https://doc.rust-lang.org/book/ch04-03-slices.html.

&str字符串片段有两个部分组成, 字符串的内存地址和比特长度(多少bytes).

需要注意的是, 这里的长度是, 有多少bytes, 而不是有多少字符(char). 如中文字符串"你好", 有两个字符, 但每个中文字符需要三个bytes, 所以总共需要6bytes.

如果你需要

需要 `s.chars().count()`, 由于 UTF8 编码的复杂性, 这个算法是 $O(n)$.

还有一个很常见的东西是 `&'static str`, 这样字符串的文本会被直接储存在程序的二进制文件, 并且生命周期贯穿整个程序, 也就是说总是可用的.

标准用途是当 `const`, 然而一般用途是当你不想处理 `Error` 的时候用于定义 `Result<(),&'static str>`.

不得不说当你使用多个三方库时处理 Error 总是令人恼火的, 我真诚的邀请你加入不处理神教.

## `String`

主要来源是 `String::new()` 和 `String::from(&str)`, 外加精准分配 `String::with_capacity(usize)`.

主要用途是拥有自己独立的生命周期, 然后拥有的方法也会多一点, 



&str字符串片段是无法修改的. 当需要动态的修改字符串时, 就需要使用结构体String. String封装在Vec<u8>之上.



当然你要问, 为什么字面量是 &str 不直接是 String?

String的内存结构与Vec相同, 栈(stack)上24bytes,

第1组8bytes, 表示字符串在堆heap上的内存地址
第2组8bytes, 表示堆heap上分配了多少可用空间
第3组8bytes, 表示当前字符串一共占用了多少bytes.

String, 堆(heap)上是一串比特数组[u8]. 

从 String 到 str 的转换是廉价的，反之，从 str 转为 String 需要分配新的内存。

随着字符串修改和增加, 堆(heap)上的内存会被重新分配(allocate), **对应的内存地址也可能会同时发生变化**, 不过反正不用原始指针管他干嘛.

一个小提示, 当你在做 StringBuilder 类似的工作时请分配过量的 capacity, 比如双倍, 吃不准甚至可以给10倍, 一般会比直接 new 导致多次 alloc 快大约 4 倍

另外如果你什么都搞不懂, 那所有函数传 `String` 总归是没错的!

## `Cow<str>`

主要来源主要是别的库作者给你, 或者你用 `Cow::from(&str)` 生成

主要用途是, 额, 和 `&str` 一样被消耗, 而且据我所知包 `str` 是 `Cow` 几乎唯一的用途.







## `Box<str>`

由于你无法获得裸的 `str`, 所以至少要用指针包起来

来源是 `Box::from(&str)`

主要用途

## Other

其他一些其实也差不多是字符串的玩意儿

- `Rc<str>`: 我劝你不要玩儿这个
- `CStr`：表示由C分配，被Rust借用的字符串，一般用于和C语言交互
- `CString`：表示由Rust分配并且可以传递给C语言的字符串
- `OsStr`：表示和操作系统相关的字符串，主要为了兼容Windows
- `OsString`：OsStr的可变版本, 拥有自己的生命周期
- `Path`：表示路径
- `PathBuf`：Path的可变版本, 拥有自己的生命周期

与他们打交道你可能会爆炸, 因为每一步几乎都会返回 Option 或者 Result